        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
    #####:   10:void adventurerCard (int drawnTreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z){
        -:   11:  
    #####:   12:	while (drawnTreasure<2){
    #####:   13:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   14:	  shuffle(currentPlayer, state);
        -:   15:	}//end if
    #####:   16:	drawCard(currentPlayer, state);
    #####:   17:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   18:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    #####:   19:		drawnTreasure++;
        -:   20:  }//end if
        -:   21:	else{
    #####:   22:		temphand[z] = cardDrawn;
    #####:   23:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   24:	  z++;
        -:   25:	}//end else
        -:   26:      }//end first while
    #####:   27:      while(z-1>=0){
    #####:   28:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:   29:	z=z-1;
        -:   30:      }//end second while 
    #####:   31:}//end adventurerCard
        -:   32:
    #####:   33:void greatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:   34:	//+1 Card
    #####:   35:	drawCard(currentPlayer, state);
        -:   36:
        -:   37:	//+1 Actions
        -:   38:	//state->numActions++;
    #####:   39:	state->numActions--;//decremented instead of incremented
        -:   40:
        -:   41:	//discard card from hand
    #####:   42:	discardCard(handPos, currentPlayer, state, 0);
    #####:   43:}//end greatHallCard
        -:   44:
        1:   45:void villageCard (int currentPlayer, struct gameState *state, int handPos){
        -:   46:	//+1 Card
        1:   47:	drawCard(currentPlayer, state);
        -:   48:
        -:   49:	//+2 Actions
        -:   50:	//state->numActions = state->numActions + 2; //commented out
        -:   51:
        -:   52:	//discard played card from hand
        1:   53:	discardCard(handPos, currentPlayer, state, 0);
        1:   54:}//end villageCard
        -:   55:
    #####:   56:void outPostCard(int currentPlayer, struct gameState *state, int handPos){
        -:   57:	
        -:   58:	//set outpost flag
        -:   59:	//state->outpostPlayed++; //Commented out
        -:   60:
        -:   61:	//discard card
    #####:   62:	discardCard(handPos, currentPlayer, state, 0);
        -:   63:
    #####:   64:}//end smithyCard
        -:   65:
        1:   66:void smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:   67:  
        -:   68:        //+3 Cards
        1:   69:      int i=0;
        4:   70:      for (i = 0; i < 3; i++)//moved i<3 to i<2
        -:   71:      {
        3:   72:        drawCard(currentPlayer, state);
        -:   73:      }
        -:   74:			
        -:   75:      //discard card from hand
        1:   76:      discardCard(handPos, currentPlayer, state, 0);      
        -:   77:      
        1:   78:}//end smithyCard
        -:   79:
      210:   80:int compare(const void* a, const void* b) {
      210:   81:  if (*(int*)a > *(int*)b)
    #####:   82:    return 1;
      210:   83:  if (*(int*)a < *(int*)b)
       56:   84:    return -1;
      154:   85:  return 0;
        -:   86:}
        -:   87:
    #####:   88:struct gameState* newGame() {
    #####:   89:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   90:  return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:		  int k8, int k9, int k10) {
    #####:   95:  int* k = malloc(10 * sizeof(int));
    #####:   96:  k[0] = k1;
    #####:   97:  k[1] = k2;
    #####:   98:  k[2] = k3;
    #####:   99:  k[3] = k4;
    #####:  100:  k[4] = k5;
    #####:  101:  k[5] = k6;
    #####:  102:  k[6] = k7;
    #####:  103:  k[7] = k8;
    #####:  104:  k[8] = k9;
    #####:  105:  k[9] = k10;
    #####:  106:  return k;
        -:  107:}
        -:  108:
        7:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:		   struct gameState *state) {
        -:  111:
        -:  112:  int i;
        -:  113:  int j;
        -:  114:  int it;			
        -:  115:  //set up random number generator
        7:  116:  SelectStream(1);
        7:  117:  PutSeed((long)randomSeed);
        -:  118:  
        -:  119:  //check number of players
        7:  120:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:      return -1;
        -:  123:    }
        -:  124:
        -:  125:  //set number of players
        7:  126:  state->numPlayers = numPlayers;
        -:  127:
        -:  128:  //check selected kingdom cards are different
       77:  129:  for (i = 0; i < 10; i++)
        -:  130:    {
      770:  131:      for (j = 0; j < 10; j++)
        -:  132:        {
      700:  133:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:	    {
    #####:  135:	      return -1;
        -:  136:	    }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:  //initialize supply
        -:  142:  ///////////////////////////////
        -:  143:
        -:  144:  //set number of Curse cards
        7:  145:  if (numPlayers == 2)
        -:  146:    {
        7:  147:      state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:  else if (numPlayers == 3)
        -:  150:    {
    #####:  151:      state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:  else
        -:  154:    {
    #####:  155:      state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:  //set number of Victory cards
        7:  159:  if (numPlayers == 2)
        -:  160:    {
        7:  161:      state->supplyCount[estate] = 8;
        7:  162:      state->supplyCount[duchy] = 8;
        7:  163:      state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:  else
        -:  166:    {
    #####:  167:      state->supplyCount[estate] = 12;
    #####:  168:      state->supplyCount[duchy] = 12;
    #####:  169:      state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:  //set number of Treasure cards
        7:  173:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  174:  state->supplyCount[silver] = 40;
        7:  175:  state->supplyCount[gold] = 30;
        -:  176:
        -:  177:  //set number of Kingdom cards
      147:  178:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
     1155:  180:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:	{
     1085:  182:	  if (kingdomCards[j] == i)
        -:  183:	    {
        -:  184:	      //check if card is a 'Victory' Kingdom card
       70:  185:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:		{
       28:  187:		  if (numPlayers == 2){ 
       14:  188:		    state->supplyCount[i] = 8; 
        -:  189:		  }
    #####:  190:		  else{ state->supplyCount[i] = 12; }
        -:  191:		}
        -:  192:	      else
        -:  193:		{
       56:  194:		  state->supplyCount[i] = 10;
        -:  195:		}
       70:  196:	      break;
        -:  197:	    }
        -:  198:	  else    //card is not in the set choosen for the game
        -:  199:	    {
     1015:  200:	      state->supplyCount[i] = -1;
        -:  201:	    }
        -:  202:	}
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:  ////////////////////////
        -:  207:  //supply intilization complete
        -:  208:
        -:  209:  //set player decks
       21:  210:  for (i = 0; i < numPlayers; i++)
        -:  211:    {
       14:  212:      state->deckCount[i] = 0;
       56:  213:      for (j = 0; j < 3; j++)
        -:  214:	{
       42:  215:	  state->deck[i][j] = estate;
       42:  216:	  state->deckCount[i]++;
        -:  217:	}
      112:  218:      for (j = 3; j < 10; j++)
        -:  219:	{
       98:  220:	  state->deck[i][j] = copper;
       98:  221:	  state->deckCount[i]++;		
        -:  222:	}
        -:  223:    }
        -:  224:
        -:  225:  //shuffle player decks
       21:  226:  for (i = 0; i < numPlayers; i++)
        -:  227:    {
       14:  228:      if ( shuffle(i, state) < 0 )
        -:  229:	{
    #####:  230:	  return -1;
        -:  231:	}
        -:  232:    }
        -:  233:
        -:  234:  //draw player hands
       21:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:      //initialize hand size to zero
       14:  238:      state->handCount[i] = 0;
       14:  239:      state->discardCount[i] = 0;
        -:  240:      //draw 5 cards
        -:  241:      // for (j = 0; j < 5; j++)
        -:  242:      //	{
        -:  243:      //	  drawCard(i, state);
        -:  244:      //	}
        -:  245:    }
        -:  246:  
        -:  247:  //set embargo tokens to 0 for all supply piles
      196:  248:  for (i = 0; i <= treasure_map; i++)
        -:  249:    {
      189:  250:      state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:  //initialize first player's turn
        7:  254:  state->outpostPlayed = 0;
        7:  255:  state->phase = 0;
        7:  256:  state->numActions = 1;
        7:  257:  state->numBuys = 1;
        7:  258:  state->playedCardCount = 0;
        7:  259:  state->whoseTurn = 0;
        7:  260:  state->handCount[state->whoseTurn] = 0;
        -:  261:  //int it; move to top
        -:  262:
        -:  263:  //Moved draw cards to here, only drawing at the start of a turn
       42:  264:  for (it = 0; it < 5; it++){
       35:  265:    drawCard(state->whoseTurn, state);
        -:  266:  }
        -:  267:
        7:  268:  updateCoins(state->whoseTurn, state, 0);
        -:  269:
        7:  270:  return 0;
        -:  271:}//end initializeGame
        -:  272:
       14:  273:int shuffle(int player, struct gameState *state) {
        -:  274: 
        -:  275:
        -:  276:  int newDeck[MAX_DECK];
       14:  277:  int newDeckPos = 0;
        -:  278:  int card;
        -:  279:  int i;
        -:  280:
       14:  281:  if (state->deckCount[player] < 1)
    #####:  282:    return -1;
       14:  283:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
      168:  286:  while (state->deckCount[player] > 0) {
      140:  287:    card = floor(Random() * state->deckCount[player]);
      140:  288:    newDeck[newDeckPos] = state->deck[player][card];
        -:  289:    //printf("player:%i | ",player);
        -:  290:    //printf("state->deck[player][card]=%i\n",state->deck[player][card]);
      140:  291:    newDeckPos++;
      531:  292:    for (i = card; i < state->deckCount[player]-1; i++) {
      391:  293:      state->deck[player][i] = state->deck[player][i+1];
        -:  294:    }
      140:  295:    state->deckCount[player]--;
        -:  296:  }
      154:  297:  for (i = 0; i < newDeckPos; i++) {
      140:  298:    state->deck[player][i] = newDeck[i];
      140:  299:    state->deckCount[player]++;
        -:  300:  }
        -:  301:
       14:  302:  return 0;
        -:  303:}//end shuffle
        -:  304:
    #####:  305:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  306:{	
        -:  307:  int card;
    #####:  308:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  309:
        -:  310:  //check if it is the right phase
    #####:  311:  if (state->phase != 0)
        -:  312:    {
    #####:  313:      return -1;
        -:  314:    }
        -:  315:	
        -:  316:  //check if player has enough actions
    #####:  317:  if ( state->numActions < 1 )
        -:  318:    {
    #####:  319:      return -1;
        -:  320:    }
        -:  321:	
        -:  322:  //get card played
    #####:  323:  card = handCard(handPos, state);
        -:  324:	
        -:  325:  //check if selected card is an action
    #####:  326:  if ( card < adventurer || card > treasure_map )
        -:  327:    {
    #####:  328:      return -1;
        -:  329:    }
        -:  330:	
        -:  331:  //play card
    #####:  332:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  333:    {
    #####:  334:      return -1;
        -:  335:    }
        -:  336:	
        -:  337:  //reduce number of actions
    #####:  338:  state->numActions--;
        -:  339:
        -:  340:  //update coins (Treasure cards may be added with card draws)
    #####:  341:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  342:	
    #####:  343:  return 0;
        -:  344:}
        -:  345:
    #####:  346:int buyCard(int supplyPos, struct gameState *state) {
        -:  347:  int who;
        -:  348:  if (DEBUG){
        -:  349:    printf("Entering buyCard...\n");
        -:  350:  }
        -:  351:
        -:  352:  // I don't know what to do about the phase thing.
        -:  353:
    #####:  354:  who = state->whoseTurn;
        -:  355:
    #####:  356:  if (state->numBuys < 1){
        -:  357:    if (DEBUG)
        -:  358:      printf("You do not have any buys left\n");
    #####:  359:    return -1;
    #####:  360:  } else if (supplyCount(supplyPos, state) <1){
        -:  361:    if (DEBUG)
        -:  362:      printf("There are not any of that type of card left\n");
    #####:  363:    return -1;
    #####:  364:  } else if (state->coins < getCost(supplyPos)){
        -:  365:    if (DEBUG) 
        -:  366:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  367:    return -1;
        -:  368:  } else {
    #####:  369:    state->phase=1;
        -:  370:    //state->supplyCount[supplyPos]--;
    #####:  371:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  372:  
    #####:  373:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  374:    state->numBuys--;
        -:  375:    if (DEBUG)
        -:  376:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  377:  }
        -:  378:
        -:  379:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  380:  //state->discardCount[who]++;
        -:  381:    
    #####:  382:  return 0;
        -:  383:}
        -:  384:
        1:  385:int numHandCards(struct gameState *state) {
        1:  386:  return state->handCount[ whoseTurn(state) ];
        -:  387:}
        -:  388:
    #####:  389:int handCard(int handPos, struct gameState *state) {
    #####:  390:  int currentPlayer = whoseTurn(state);
    #####:  391:  return state->hand[currentPlayer][handPos];
        -:  392:}
        -:  393:
    #####:  394:int supplyCount(int card, struct gameState *state) {
    #####:  395:  return state->supplyCount[card];
        -:  396:}
        -:  397:
    #####:  398:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  399:  int i;
    #####:  400:  int count = 0;
        -:  401:
    #####:  402:  for (i = 0; i < state->deckCount[player]; i++)
        -:  403:    {
    #####:  404:      if (state->deck[player][i] == card) count++;
        -:  405:    }
        -:  406:
    #####:  407:  for (i = 0; i < state->handCount[player]; i++)
        -:  408:    {
    #####:  409:      if (state->hand[player][i] == card) count++;
        -:  410:    }
        -:  411:
    #####:  412:  for (i = 0; i < state->discardCount[player]; i++)
        -:  413:    {
    #####:  414:      if (state->discard[player][i] == card) count++;
        -:  415:    }
        -:  416:
    #####:  417:  return count;
        -:  418:}
        -:  419:
        2:  420:int whoseTurn(struct gameState *state) {
        2:  421:  return state->whoseTurn;
        -:  422:}
        -:  423:
    #####:  424:int endTurn(struct gameState *state) {
        -:  425:  int k;
        -:  426:  int i;
    #####:  427:  int currentPlayer = whoseTurn(state);
        -:  428:  
        -:  429:  //Discard hand
    #####:  430:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  431:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  432:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  433:  }
    #####:  434:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  435:    
        -:  436:  //Code for determining the player
    #####:  437:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  438:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  439:  }
        -:  440:  else{
    #####:  441:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  442:  }
        -:  443:
    #####:  444:  state->outpostPlayed = 0;
    #####:  445:  state->phase = 0;
    #####:  446:  state->numActions = 1;
    #####:  447:  state->coins = 0;
    #####:  448:  state->numBuys = 1;
    #####:  449:  state->playedCardCount = 0;
    #####:  450:  state->handCount[state->whoseTurn] = 0;
        -:  451:
        -:  452:  //int k; move to top
        -:  453:  //Next player draws hand
    #####:  454:  for (k = 0; k < 5; k++){
    #####:  455:    drawCard(state->whoseTurn, state);//Draw a card
        -:  456:  }
        -:  457:
        -:  458:  //Update money
    #####:  459:  updateCoins(state->whoseTurn, state , 0);
        -:  460:
    #####:  461:  return 0;
        -:  462:}
        -:  463:
    #####:  464:int isGameOver(struct gameState *state) {
        -:  465:  int i;
        -:  466:  int j;
        -:  467:	
        -:  468:  //if stack of Province cards is empty, the game ends
    #####:  469:  if (state->supplyCount[province] == 0)
        -:  470:    {
    #####:  471:      return 1;
        -:  472:    }
        -:  473:
        -:  474:  //if three supply pile are at 0, the game ends
    #####:  475:  j = 0;
    #####:  476:  for (i = 0; i < 25; i++)
        -:  477:    {
    #####:  478:      if (state->supplyCount[i] == 0)
        -:  479:	{
    #####:  480:	  j++;
        -:  481:	}
        -:  482:    }
    #####:  483:  if ( j >= 3)
        -:  484:    {
    #####:  485:      return 1;
        -:  486:    }
        -:  487:
    #####:  488:  return 0;
        -:  489:}
        -:  490:
    #####:  491:int scoreFor (int player, struct gameState *state) {
        -:  492:
        -:  493:  int i;
    #####:  494:  int score = 0;
        -:  495:  //score from hand
    #####:  496:  for (i = 0; i < state->handCount[player]; i++)
        -:  497:    {
    #####:  498:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  499:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  500:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  501:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  502:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  503:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  504:    }
        -:  505:
        -:  506:  //score from discard
    #####:  507:  for (i = 0; i < state->discardCount[player]; i++)
        -:  508:    {
    #####:  509:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  510:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  511:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  512:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  513:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  514:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  515:    }
        -:  516:
        -:  517:  //score from deck
    #####:  518:  for (i = 0; i < state->discardCount[player]; i++)
        -:  519:    {
    #####:  520:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  521:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  522:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  523:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  524:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  525:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  526:    }
        -:  527:
    #####:  528:  return score;
        -:  529:}
        -:  530:
    #####:  531:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  532:  int i;	
        -:  533:  int j;
        -:  534:  int highScore;
        -:  535:  int currentPlayer;
        -:  536:
        -:  537:  //get score for each player
    #####:  538:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  539:    {
        -:  540:      //set unused player scores to -9999
    #####:  541:      if (i >= state->numPlayers)
        -:  542:	{
    #####:  543:	  players[i] = -9999;
        -:  544:	}
        -:  545:      else
        -:  546:	{
    #####:  547:	  players[i] = scoreFor (i, state);
        -:  548:	}
        -:  549:    }
        -:  550:
        -:  551:  //find highest score
    #####:  552:  j = 0;
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:    {
    #####:  555:      if (players[i] > players[j])
        -:  556:	{
    #####:  557:	  j = i;
        -:  558:	}
        -:  559:    }
    #####:  560:  highScore = players[j];
        -:  561:
        -:  562:  //add 1 to players who had less turns
    #####:  563:  currentPlayer = whoseTurn(state);
    #####:  564:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  565:    {
    #####:  566:      if ( players[i] == highScore && i > currentPlayer )
        -:  567:	{
    #####:  568:	  players[i]++;
        -:  569:	}
        -:  570:    }
        -:  571:
        -:  572:  //find new highest score
    #####:  573:  j = 0;
    #####:  574:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  575:    {
    #####:  576:      if ( players[i] > players[j] )
        -:  577:	{
    #####:  578:	  j = i;
        -:  579:	}
        -:  580:    }
    #####:  581:  highScore = players[j];
        -:  582:
        -:  583:  //set winners in array to 1 and rest to 0
    #####:  584:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  585:    {
    #####:  586:      if ( players[i] == highScore )
        -:  587:	{
    #####:  588:	  players[i] = 1;
        -:  589:	}
        -:  590:      else
        -:  591:	{
    #####:  592:	  players[i] = 0;
        -:  593:	}
        -:  594:    }
        -:  595:
    #####:  596:  return 0;
        -:  597:}
        -:  598:
       39:  599:int drawCard(int player, struct gameState *state)
        -:  600:{	int count;
        -:  601:  int deckCounter;
       39:  602:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  603:    
        -:  604:    //Step 1 Shuffle the discard pile back into a deck
        -:  605:    int i;
        -:  606:    //Move discard to deck
    #####:  607:    for (i = 0; i < state->discardCount[player];i++){
    #####:  608:      state->deck[player][i] = state->discard[player][i];
    #####:  609:      state->discard[player][i] = -1;
        -:  610:    }
        -:  611:
    #####:  612:    state->deckCount[player] = state->discardCount[player];
    #####:  613:    state->discardCount[player] = 0;//Reset discard
        -:  614:
        -:  615:    //Shufffle the deck
    #####:  616:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  617:   
        -:  618:    if (DEBUG){//Debug statements
        -:  619:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  620:    }
        -:  621:    
    #####:  622:    state->discardCount[player] = 0;
        -:  623:
        -:  624:    //Step 2 Draw Card
    #####:  625:    count = state->handCount[player];//Get current player's hand count
        -:  626:    
        -:  627:    if (DEBUG){//Debug statements
        -:  628:      printf("Current hand count: %d\n", count);
        -:  629:    }
        -:  630:    
    #####:  631:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  632:
    #####:  633:    if (deckCounter == 0)
    #####:  634:      return -1;
        -:  635:
    #####:  636:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  637:    state->deckCount[player]--;
    #####:  638:    state->handCount[player]++;//Increment hand count
        -:  639:	
        -:  640:  }
        -:  641:
        -:  642:  else{
       39:  643:    int count = state->handCount[player];//Get current hand count for player
        -:  644:    int deckCounter;
        -:  645:    if (DEBUG){//Debug statements
        -:  646:      printf("Current hand count: %d\n", count);
        -:  647:    }
        -:  648:
       39:  649:    deckCounter = state->deckCount[player];//Create holder for the deck count
       39:  650:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       39:  651:    state->deckCount[player]--;
       39:  652:    state->handCount[player]++;//Increment hand count
        -:  653:    //printf("handCount in drawCard: %i\n", state->handCount[player]);
        -:  654:  }
        -:  655:
       39:  656:  return 0;
        -:  657:}
        -:  658:
       22:  659:int getCost(int cardNumber)
        -:  660:{
       22:  661:  switch( cardNumber ) 
        -:  662:    {
        -:  663:    case curse:
        1:  664:      return 0;
        -:  665:    case estate:
        1:  666:      return 2;
        -:  667:    case duchy:
        1:  668:      return 5;
        -:  669:    case province:
        1:  670:      return 8;
        -:  671:    case copper:
        1:  672:      return 0;
        -:  673:    case silver:
        1:  674:      return 3;
        -:  675:    case gold:
        1:  676:      return 6;
        -:  677:    case adventurer:
        1:  678:      return 6;
        -:  679:    case council_room:
        1:  680:      return 5;
        -:  681:    case feast:
        1:  682:      return 4;
        -:  683:    case gardens:
        1:  684:      return 4;
        -:  685:    case mine:
        1:  686:      return 5;
        -:  687:    case remodel:
        1:  688:      return 4;
        -:  689:    case smithy:
        1:  690:      return 4;
        -:  691:    case village:
        1:  692:      return 3;
        -:  693:    case baron:
        1:  694:      return 4;
        -:  695:    case great_hall:
        1:  696:      return 3;
        -:  697:    case minion:
        1:  698:      return 5;
        -:  699:    case steward:
        1:  700:      return 3;
        -:  701:    case tribute:
        1:  702:      return 5;
        -:  703:    case ambassador:
        1:  704:      return 3;
        -:  705:    case cutpurse:
        1:  706:      return 4;
        -:  707:    case embargo: 
    #####:  708:      return 2;
        -:  709:    case outpost:
    #####:  710:      return 5;
        -:  711:    case salvager:
    #####:  712:      return 4;
        -:  713:    case sea_hag:
    #####:  714:      return 4;
        -:  715:    case treasure_map:
    #####:  716:      return 4;
        -:  717:    }
        -:  718:	
    #####:  719:  return -1;
        -:  720:}
        -:  721:
        1:  722:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  723:{
        -:  724:  int i;
        -:  725:  int j;
        -:  726:  int k;
        -:  727:  int x;
        -:  728:  int index;
        1:  729:  int currentPlayer = whoseTurn(state);
        1:  730:  int nextPlayer = currentPlayer + 1;
        -:  731:
        1:  732:  int tributeRevealedCards[2] = {-1, -1};
        -:  733:  int temphand[MAX_HAND];// moved above the if statement
        1:  734:  int drawntreasure=0;
        -:  735:  int cardDrawn;
        1:  736:  int z = 0;// this is the counter for the temp hand
        1:  737:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  738:    nextPlayer = 0;
        -:  739:  }
        -:  740:  
        -:  741:	
        -:  742:  //uses switch to select card and perform actions
        1:  743:  switch( card ) 
        -:  744:    {
        -:  745:    case adventurer:
    #####:  746:		adventurerCard(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case council_room:
        -:  750:      //+4 Cards
    #####:  751:      for (i = 0; i < 4; i++)
        -:  752:	{
    #####:  753:	  drawCard(currentPlayer, state);
        -:  754:	}
        -:  755:			
        -:  756:      //+1 Buy
    #####:  757:      state->numBuys++;
        -:  758:			
        -:  759:      //Each other player draws a card
    #####:  760:      for (i = 0; i < state->numPlayers; i++)
        -:  761:	{
    #####:  762:	  if ( i != currentPlayer )
        -:  763:	    {
    #####:  764:	      drawCard(i, state);
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      //put played card in played card pile
    #####:  769:      discardCard(handPos, currentPlayer, state, 0);
        -:  770:			
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case feast:
        -:  774:      //gain card with cost up to 5
        -:  775:      //Backup hand
    #####:  776:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  777:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  778:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  779:      }
        -:  780:      //Backup hand
        -:  781:
        -:  782:      //Update Coins for Buy
    #####:  783:      updateCoins(currentPlayer, state, 5);
    #####:  784:      x = 1;//Condition to loop on
    #####:  785:      while( x == 1) {//Buy one card
    #####:  786:	if (supplyCount(choice1, state) <= 0){
        -:  787:	  if (DEBUG)
        -:  788:	    printf("None of that card left, sorry!\n");
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  792:	  }
        -:  793:	}
    #####:  794:	else if (state->coins < getCost(choice1)){
    #####:  795:	  printf("That card is too expensive!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  799:	  }
        -:  800:	}
        -:  801:	else{
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:	  }
        -:  806:
    #####:  807:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  808:	  x = 0;//No more buying cards
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
        -:  814:	}
        -:  815:      }     
        -:  816:
        -:  817:      //Reset Hand
    #####:  818:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  819:	state->hand[currentPlayer][i] = temphand[i];
    #####:  820:	temphand[i] = -1;
        -:  821:      }
        -:  822:      //Reset Hand
        -:  823:      			
    #####:  824:      return 0;
        -:  825:			
        -:  826:    case gardens:
    #####:  827:      return -1;
        -:  828:			
        -:  829:    case mine:
    #####:  830:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:		
    #####:  837:      if (choice2 > treasure_map || choice2 < curse)
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      gainCard(choice2, state, 2, currentPlayer);
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  854:	{
    #####:  855:	  if (state->hand[currentPlayer][i] == j)
        -:  856:	    {
    #####:  857:	      discardCard(i, currentPlayer, state, 0);			
    #####:  858:	      break;
        -:  859:	    }
        -:  860:	}
        -:  861:			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 0, currentPlayer);
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:
        -:  887:
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case smithy:
        1:  891:		smithyCard(currentPlayer, state, handPos);
        1:  892:      return 0;
        -:  893:		
        -:  894:    case village:
        -:  895:      
    #####:  896:		villageCard(currentPlayer, state, handPos);
    #####:  897:		return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
        -:  951:
    #####:  952:	  greatHallCard(currentPlayer, state, handPos);
        -:  953:      
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case minion:
        -:  957:      //+1 action
    #####:  958:      state->numActions++;
        -:  959:			
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:			
    #####:  963:      if (choice1)		//+2 coins
        -:  964:	{
    #####:  965:	  state->coins = state->coins + 2;
        -:  966:	}
        -:  967:			
    #####:  968:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  969:	{
        -:  970:	  //discard hand
    #####:  971:	  while(numHandCards(state) > 0)
        -:  972:	    {
    #####:  973:	      discardCard(handPos, currentPlayer, state, 0);
        -:  974:	    }
        -:  975:				
        -:  976:	  //draw 4
    #####:  977:	  for (i = 0; i < 4; i++)
        -:  978:	    {
    #####:  979:	      drawCard(currentPlayer, state);
        -:  980:	    }
        -:  981:				
        -:  982:	  //other players discard hand and redraw if hand size > 4
    #####:  983:	  for (i = 0; i < state->numPlayers; i++)
        -:  984:	    {
    #####:  985:	      if (i != currentPlayer)
        -:  986:		{
    #####:  987:		  if ( state->handCount[i] > 4 )
        -:  988:		    {
        -:  989:		      //discard hand
    #####:  990:		      while( state->handCount[i] > 0 )
        -:  991:			{
    #####:  992:			  discardCard(handPos, i, state, 0);
        -:  993:			}
        -:  994:							
        -:  995:		      //draw 4
    #####:  996:		      for (j = 0; j < 4; j++)
        -:  997:			{
    #####:  998:			  drawCard(i, state);
        -:  999:			}
        -: 1000:		    }
        -: 1001:		}
        -: 1002:	    }
        -: 1003:				
        -: 1004:	}
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case steward:
    #####: 1008:      if (choice1 == 1)
        -: 1009:	{
        -: 1010:	  //+2 cards
    #####: 1011:	  drawCard(currentPlayer, state);
    #####: 1012:	  drawCard(currentPlayer, state);
        -: 1013:	}
    #####: 1014:      else if (choice1 == 2)
        -: 1015:	{
        -: 1016:	  //+2 coins
    #####: 1017:	  state->coins = state->coins + 2;
        -: 1018:	}
        -: 1019:      else
        -: 1020:	{
        -: 1021:	  //trash 2 cards in hand
    #####: 1022:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1023:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1024:	}
        -: 1025:			
        -: 1026:      //discard card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case tribute:
    #####: 1031:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1032:	if (state->deckCount[nextPlayer] > 0){
    #####: 1033:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	  state->deckCount[nextPlayer]--;
        -: 1035:	}
    #####: 1036:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1037:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1038:	  state->discardCount[nextPlayer]--;
        -: 1039:	}
        -: 1040:	else{
        -: 1041:	  //No Card to Reveal
        -: 1042:	  if (DEBUG){
        -: 1043:	    printf("No cards to reveal\n");
        -: 1044:	  }
        -: 1045:	}
        -: 1046:      }
        -: 1047:	    
        -: 1048:      else{
    #####: 1049:	if (state->deckCount[nextPlayer] == 0){
    #####: 1050:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1051:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1052:	    state->deckCount[nextPlayer]++;
    #####: 1053:	    state->discard[nextPlayer][i] = -1;
    #####: 1054:	    state->discardCount[nextPlayer]--;
        -: 1055:	  }
        -: 1056:			    
    #####: 1057:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1058:	} 
    #####: 1059:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1060:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1061:	state->deckCount[nextPlayer]--;
    #####: 1062:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
        -: 1065:      }    
        -: 1066:		       
    #####: 1067:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1068:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1069:	state->playedCardCount++;
    #####: 1070:	tributeRevealedCards[1] = -1;
        -: 1071:      }
        -: 1072:
    #####: 1073:      for (i = 0; i <= 2; i ++){
    #####: 1074:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1075:	  state->coins += 2;
        -: 1076:	}
        -: 1077:		    
    #####: 1078:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1079:	  drawCard(currentPlayer, state);
    #####: 1080:	  drawCard(currentPlayer, state);
        -: 1081:	}
        -: 1082:	else{//Action Card
    #####: 1083:	  state->numActions = state->numActions + 2;
        -: 1084:	}
        -: 1085:      }
        -: 1086:	    
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case ambassador:
    #####: 1090:      j = 0;		//used to check if player has enough cards to discard
        -: 1091:
    #####: 1092:      if (choice2 > 2 || choice2 < 0)
        -: 1093:	{
    #####: 1094:	  return -1;				
        -: 1095:	}
        -: 1096:
    #####: 1097:      if (choice1 == handPos)
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:
    #####: 1102:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	{
    #####: 1104:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1105:	    {
    #####: 1106:	      j++;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (j < choice2)
        -: 1110:	{
    #####: 1111:	  return -1;				
        -: 1112:	}
        -: 1113:
        -: 1114:      if (DEBUG) 
        -: 1115:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1116:
        -: 1117:      //increase supply count for choosen card by amount being discarded
    #####: 1118:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1119:			
        -: 1120:      //each other player gains a copy of revealed card
    #####: 1121:      for (i = 0; i < state->numPlayers; i++)
        -: 1122:	{
    #####: 1123:	  if (i != currentPlayer)
        -: 1124:	    {
    #####: 1125:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1126:	    }
        -: 1127:	}
        -: 1128:
        -: 1129:      //discard played card from hand
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1131:
        -: 1132:      //trash copies of cards returned to supply
    #####: 1133:      for (j = 0; j < choice2; j++)
        -: 1134:	{
    #####: 1135:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	    {
    #####: 1137:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1138:		{
    #####: 1139:		  discardCard(i, currentPlayer, state, 1);
    #####: 1140:		  break;
        -: 1141:		}
        -: 1142:	    }
        -: 1143:	}			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:		
        -: 1147:    case cutpurse:
        -: 1148:
    #####: 1149:      updateCoins(currentPlayer, state, 2);
    #####: 1150:      for (i = 0; i < state->numPlayers; i++)
        -: 1151:	{
    #####: 1152:	  if (i != currentPlayer)
        -: 1153:	    {
    #####: 1154:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1155:		{
    #####: 1156:		  if (state->hand[i][j] == copper)
        -: 1157:		    {
    #####: 1158:		      discardCard(j, i, state, 0);
    #####: 1159:		      break;
        -: 1160:		    }
    #####: 1161:		  if (j == state->handCount[i])
        -: 1162:		    {
    #####: 1163:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1164:			{
        -: 1165:			  if (DEBUG)
        -: 1166:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1167:			}	
    #####: 1168:		      break;
        -: 1169:		    }		
        -: 1170:		}
        -: 1171:					
        -: 1172:	    }
        -: 1173:				
        -: 1174:	}				
        -: 1175:
        -: 1176:      //discard played card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1178:
    #####: 1179:      return 0;
        -: 1180:
        -: 1181:		
        -: 1182:    case embargo: 
        -: 1183:      //+2 Coins
    #####: 1184:      state->coins = state->coins + 2;
        -: 1185:			
        -: 1186:      //see if selected pile is in play
    #####: 1187:      if ( state->supplyCount[choice1] == -1 )
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:			
        -: 1192:      //add embargo token to selected supply pile
    #####: 1193:      state->embargoTokens[choice1]++;
        -: 1194:			
        -: 1195:      //trash card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case outpost:
    #####: 1200:		outPostCard(currentPlayer, state, handPos);
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:    case salvager:
        -: 1204:      //+1 buy
    #####: 1205:      state->numBuys++;
        -: 1206:			
    #####: 1207:      if (choice1)
        -: 1208:	{
        -: 1209:	  //gain coins equal to trashed card
    #####: 1210:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1211:	  //trash card
    #####: 1212:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1213:	}
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case sea_hag:
    #####: 1220:      for (i = 0; i < state->numPlayers; i++){
    #####: 1221:	if (i != currentPlayer){
    #####: 1222:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1223:	  state->discardCount[i]++;
    #####: 1224:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1225:	}
        -: 1226:      }
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case treasure_map:
        -: 1230:      //search hand for another treasure_map
    #####: 1231:      index = -1;
    #####: 1232:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:	{
    #####: 1234:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1235:	    {
    #####: 1236:	      index = i;
    #####: 1237:	      break;
        -: 1238:	    }
        -: 1239:	}
    #####: 1240:      if (index > -1)
        -: 1241:	{
        -: 1242:	  //trash both treasure cards
    #####: 1243:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1244:	  discardCard(index, currentPlayer, state, 1);
        -: 1245:
        -: 1246:	  //gain 4 Gold cards
    #####: 1247:	  for (i = 0; i < 4; i++)
        -: 1248:	    {
    #####: 1249:	      gainCard(gold, state, 1, currentPlayer);
        -: 1250:	    }
        -: 1251:				
        -: 1252:	  //return success
    #####: 1253:	  return 1;
        -: 1254:	}
        -: 1255:			
        -: 1256:      //no second treasure_map found in hand
    #####: 1257:      return -1;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return -1;
        -: 1261:}
        -: 1262:
        2: 1263:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1264:{	
        -: 1265:  //if card is not trashed, added to Played pile 
        2: 1266:  if (trashFlag < 1)
        -: 1267:    {
        -: 1268:      //add card to played pile
        2: 1269:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1270:      state->playedCardCount++;
        -: 1271:    }	
        -: 1272:  //set played card to -1
        2: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
        2: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        2: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
        2: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
        2: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
        2: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
        2: 1296:  return 0;
        -: 1297:}
        -: 1298:
    #####: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
    #####: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
    #####: 1333:  return 0;
        -: 1334:}
        -: 1335:
       11: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
       11: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
       66: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
       55: 1346:      if (state->hand[player][i] == copper)
        -: 1347:	{
       42: 1348:	  state->coins += 1;
        -: 1349:	}
       13: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:	{
        4: 1352:	  state->coins += 2;
        -: 1353:	}
        9: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:	{
        4: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
       11: 1361:  state->coins += bonus;
        -: 1362:
       11: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
